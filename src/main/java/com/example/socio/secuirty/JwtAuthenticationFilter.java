// Code Generated by Sidekick is for learning and experimentation purposes only. For other use cases, please see the guidance linked here for accessing and using the Deloitte-approved tools [GitHub Copilot](https://resources.deloitte.com/:p:/r/sites/MyTechnology/GenAI/Platforms_Tools/GitHub%20Copilot/GitHub_Copilot_Overview_Guide.pptx?d=w5099365971a946aaa49908583395b585&csf=1&web=1&e=I1r8Pf) or [AWS Codewhisperer](https://resources.deloitte.com/:p:/r/sites/MyTechnology/_layouts/15/Doc.aspx?sourcedoc=%7b5FA15CB2-2328-460F-8220-DC996136BAC5%7d&file=Amazon_CodeWhisperer_Overview_Guide.pptx&action=edit&mobileredirect=true).

package com.example.socio.secuirty;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.lang.NonNull;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private final com.example.socio.secuirty.JwtTokenProvider jwtTokenProvider;
    private final UserDetailsService userDetailsService;

    public JwtAuthenticationFilter(com.example.socio.secuirty.JwtTokenProvider jwtTokenProvider, UserDetailsService userDetailsService) {
        this.jwtTokenProvider = jwtTokenProvider;
        this.userDetailsService = userDetailsService;
    }

    @Override
    protected void doFilterInternal(@NonNull HttpServletRequest request, @NonNull HttpServletResponse response, @NonNull FilterChain filterChain) throws ServletException, IOException {
        String token = getTokenFromRequest(request);

        if (token != null && jwtTokenProvider.validateToken(token)) {
            Authentication authentication = getAuthentication(token);
            SecurityContextHolder.getContext().setAuthentication(authentication);
        }

        filterChain.doFilter(request, response);
    }

    private String getTokenFromRequest(HttpServletRequest request) {
        String bearerToken = request.getHeader("Authorization");

        if (bearerToken != null && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7);
        }

        return null;
    }

    private Authentication getAuthentication(String token) {
        String username = jwtTokenProvider.getUsernameFromToken(token);
        UserDetails userDetails = userDetailsService.loadUserByUsername(username);
        return new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
    }
}